model testpkg.pkg0

version "3.0.0"

include "pkg0/pkg03-inclusion.bmo"



root data Clash {}

ns clash {
    root data Clash {}
    ns clash {
       root adt Clash {
            data Branch1 {}
       }
    }
}

root data Clash1 {}
root adt ADT {
   data Clash1 {}
}

ns xxx {
    ns xxx {
        data A {}
    }
}

ns test {
    root data TEST_D1 {
       a: test.sub.TEST_SUB_A1
       b: sub.TEST_SUB_A1
    }

    ns sub {
        adt TEST_SUB_A1 {
           data TEST_SUB_A1_B1 { value: i32 }
           data TEST_SUB_A1_B2 { value: str }
           data TEST_SUB_A1_B3_RECURSIVE { value: TEST_SUB_A1 }
           data TEST_SUB_A1_B4_RECURSIVE { value: test.sub.TEST_SUB_A1 }
           data TEST_SUB_A1_B5_RECURSIVE { value: sub.TEST_SUB_A1 }
        }

        adt TEST_SUB_A2 {
           data TEST_SUB_A2_B1 { value: i32 }
           data TEST_SUB_A2_B2 { value: str }
        }
    }
}

root adt RecTest1 {
   data Branch1 { value: RecTest1 }
   data Branch2 { value : i32 }
}


root adt RecTest2 {
   data Branch1 { value: opt[RecTest2] }
}


root adt VaultState {
    // Undefined state, we haven't yet obtained enough information to define the state.
    data Undefined {
    }

    // Broken state, remote vault is not retrievable therefore can't be synced.
    data Broken {
        reason: str
    }

    // Vault is identified and operational
    contract Operational {
        id: str
        version: i64
    }

    // Up to date, might still have requests pending,
    // but they don't require the game to interrupt and force any kind of updates.
    data Current {
        is Operational
    }

    // User vault needs a merge.
    // The user can still write to the vault, however it will only add to the local state of the vault,
    // until a user is ready to take onto a merge.
    contract Diverged {
        is Operational
    }

    // User vault is just outdated, there is a newer one on the backend and the user needs to
    // reconcile versions divergence.
    data Outdated {
        is Diverged
        additionalVaults: lst[str]
    }

    // Identity has been merged and there is now more than one vault.
    // Needs to be reconciled and saved.
    data Locked {
        is Diverged
        remoteVersion: i64
        lockedBy: str
    }
}

root data T1_D1 : derived[json] {
 f0: T1_D2
 f1: i08
 f3: str
}

//

data T2_D2 {
    f: str
    f1: opt[str]
}

root data T2_D1 {
  f0: T2_D2
}

//

root data T3_D1 {
  f1: str
}

//

contract S0 {
  f3: opt[str]
}

contract S1 {
  is S0

  f1: str
}

root adt T4_A1 : derived[json] {
   is S1

   contract S2 {
       f2: i32
   }

   data B1 {
       is S2
       //-  f2: i32

       f1: str
       f2: i32

       f: T3_D1
   }
   data B2 {
       f: T2_D1
   }
   data B4 {
       f: str
   }
}

//

enum T1_E2 {
 A
 B
 C
}

root data T1_E2_RET {
    f: T1_E2
    o: opt[T1_E2]
}


//

root adt T5_A1 {
   data B1 {
       f: str
   }
   data B2 {
      f: i32
   }
}

data T7_D2 { // const size in ueba
    f1: i32
    f2: uid

}
root data T7_D1 { // const size in ueba
    f1: i32
    f3: T7_D2
}

//

data T6_D2 {
    f00: str
    f01: u08
    f02: u16
    f03: u32
    f04: u64

    f05: i08
    f06: i16
    f07: i32
    f08: i64

    f09: tso
    f10: tsu

    f11: f32
    f12: f64
    f13: f128

    f14: bit
}


root data T6_D1 {
    fSameBuiltin: i08
    fSameCustom: T6_D2
    fSameCustomOpt: opt[T6_D2]
    fSameCustomLst: lst[T6_D2]
    fSameCustomMap: map[str, T6_D2]

    fWrapOpt: opt[i08]
    fWrapLst: lst[i08]
    fWrapSet: set[i08]

    fSwapOptSet0: set[i08]
    fSwapOptSet1: set[str]
    fSwapOptSet2: set[T6_D2]
    fSwapOptLst0: lst[i08]
    fSwapOptLst1: lst[str]
    fSwapOptLst2: lst[T6_D2]


    fSwapLstSet: set[i08]
    fSwapSetLst: lst[i08]

    fNewOpt: opt[i32]
    fNewSet: set[i32]
    fNewLst: lst[i32]
    fNewMap: map[str, i32]

    fPrecex0: u32
    fPrecex1: opt[u32]
    fPrecex2: lst[u32]
    fPrecex3: set[u32]
    fPrecex4: map[u32, u32]
    fPrecex5: lst[opt[u32]]
    fPrecex6: lst[opt[u32]]


    fSwapPrecex0: lst[u32]
    fSwapPrecex1: set[u32]
    fSwapPrecex2: lst[u32]
}

//

root data T7_Empty {

}

root service I1 {
    def testCall (
        data in {
        }
        
        data out {
          i00: i32
        }
        
        data err {
          msg: str
        }
    )
    
    def testCall2 (
        in = T7_Empty
        out = T7_Empty
        err = T7_Empty
    )
}